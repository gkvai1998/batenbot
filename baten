from telegram import ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, ConversationHandler

# Define the states
PRODUCTS, ORDER, CONFIRM_ORDER, ORDER_STATUS = range(4)

# Example product catalog
products = [
    {'id': 1, 'name': 'Product 1', 'price': '10 USD'},
    {'id': 2, 'name': 'Product 2', 'price': '20 USD'},
    {'id': 3, 'name': 'Product 3', 'price': '15 USD'},
]

# Orders placeholder (in a real app, this would be stored in a database)
orders = {}

# Command for /start
def start(update, context):
    update.message.reply_text(
        "Welcome to our business bot! ðŸ›’\n\n"
        "You can use the following commands:\n"
        "/products - View available products\n"
        "/order - Place an order\n"
        "/status - Check the status of your order"
    )
    return PRODUCTS

# Show available products
def show_products(update, context):
    product_list = "\n".join([f"{product['id']}. {product['name']} - {product['price']}" for product in products])
    update.message.reply_text(f"Here are the available products:\n\n{product_list}")
    return PRODUCTS

# Start order process
def start_order(update, context):
    update.message.reply_text("Please type the product ID to place your order (e.g., '1' for Product 1).")
    return ORDER

# Process order
def process_order(update, context):
    try:
        product_id = int(update.message.text)
        selected_product = next((prod for prod in products if prod['id'] == product_id), None)

        if selected_product:
            context.user_data['selected_product'] = selected_product
            update.message.reply_text(f"You have selected {selected_product['name']} for {selected_product['price']}.")
            update.message.reply_text("Please provide your delivery address.")
            return ORDER_STATUS
        else:
            update.message.reply_text("Invalid product ID. Please select a valid product ID.")
            return ORDER
    except ValueError:
        update.message.reply_text("Please enter a valid product ID.")
        return ORDER

# Get delivery address and confirm order
def get_address(update, context):
    user_address = update.message.text
    context.user_data['address'] = user_address

    selected_product = context.user_data.get('selected_product', {})
    order_id = len(orders) + 1  # Simple order ID generation
    orders[order_id] = {
        'user': update.message.from_user.username,
        'product': selected_product['name'],
        'price': selected_product['price'],
        'address': user_address,
        'status': 'Order Placed'
    }

    update.message.reply_text(f"Thank you for your order! Your order ID is #{order_id}.\n"
                              f"Product: {selected_product['name']}\n"
                              f"Address: {user_address}\n"
                              "Your order will be processed soon.")
    return ConversationHandler.END

# Order status inquiry
def order_status(update, context):
    update.message.reply_text("Please enter your order ID to check the status (e.g., '1').")
    return ORDER_STATUS

# Check order status
def check_order_status(update, context):
    try:
        order_id = int(update.message.text)
        order = orders.get(order_id, None)

        if order:
            update.message.reply_text(f"Order ID: #{order_id}\n"
                                      f"Product: {order['product']}\n"
                                      f"Price: {order['price']}\n"
                                      f"Address: {order['address']}\n"
                                      f"Status: {order['status']}")
        else:
            update.message.reply_text("Invalid order ID. Please try again.")
    except ValueError:
        update.message.reply_text("Please enter a valid order ID.")

    return ConversationHandler.END

# Main function to set up the bot
def main():
    # Replace '7721636342:AAEwHJpjYa3_2-nqDYCm0KRdFCR1wHfFA1U's API token
    updater = Updater("7721636342:AAEwHJpjYa3_2-nqDYCm0KRdFCR1wHfFA1U",  use_context=True)

    # Get the dispatcher to register handlers
    dp = updater.dispatcher

    # Set up conversation handler for product ordering
    conversation_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start), CommandHandler("products", show_products)],
        states={
            PRODUCTS: [CommandHandler("order", start_order),
                       CommandHandler("products", show_products)],
            ORDER: [MessageHandler(Filters.text & ~Filters.command, process_order)],
            ORDER_STATUS: [MessageHandler(Filters.text & ~Filters.command, get_address),
                           CommandHandler("status", order_status)],
            CONFIRM_ORDER: [MessageHandler(Filters.text & ~Filters.command, check_order_status)],
        },
        fallbacks=[CommandHandler("cancel", lambda update, context: update.message.reply_text("Order process canceled."))],
    )

    dp.add_handler(conversation_handler)

    # Start the bot
    updater.start_polling()
    updater.idle()

if __name__ == '__main__':
    main()
